{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [force=false]\n *   Whether to use `delete` to remove `position` fields.\n *\n *   The default is to set them to `undefined`.\n */\n\nimport { visit } from 'unist-util-visit';\n\n/**\n * Remove the `position` field from a tree.\n *\n * @template {Node} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to clean.\n * @param {Options | boolean | null | undefined} [options]\n *   Configuration.\n * @returns {Tree}\n *   The given, modified, `tree`.\n */\n// To do: next major: return `void`.\n// To do: remove `force` shortcut, replace with options.\nexport function removePosition(tree, options) {\n  const force = typeof options === 'boolean' ? options : options ? options.force : false;\n  visit(tree, remove);\n  return tree;\n\n  /**\n   * @param {Node} node\n   */\n  function remove(node) {\n    if (force) {\n      delete node.position;\n    } else {\n      node.position = undefined;\n    }\n  }\n}","map":{"version":3,"names":["visit","removePosition","tree","options","force","remove","node","position","undefined"],"sources":["E:/CScourse/视听觉/Sound-Quality-HCI/node_modules/unist-util-remove-position/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [force=false]\n *   Whether to use `delete` to remove `position` fields.\n *\n *   The default is to set them to `undefined`.\n */\n\nimport {visit} from 'unist-util-visit'\n\n/**\n * Remove the `position` field from a tree.\n *\n * @template {Node} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to clean.\n * @param {Options | boolean | null | undefined} [options]\n *   Configuration.\n * @returns {Tree}\n *   The given, modified, `tree`.\n */\n// To do: next major: return `void`.\n// To do: remove `force` shortcut, replace with options.\nexport function removePosition(tree, options) {\n  const force =\n    typeof options === 'boolean' ? options : options ? options.force : false\n\n  visit(tree, remove)\n\n  return tree\n\n  /**\n   * @param {Node} node\n   */\n  function remove(node) {\n    if (force) {\n      delete node.position\n    } else {\n      node.position = undefined\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,KAAK,QAAO,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC5C,MAAMC,KAAK,GACT,OAAOD,OAAO,KAAK,SAAS,GAAGA,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAACC,KAAK,GAAG,KAAK;EAE1EJ,KAAK,CAACE,IAAI,EAAEG,MAAM,CAAC;EAEnB,OAAOH,IAAI;;EAEX;AACF;AACA;EACE,SAASG,MAAMA,CAACC,IAAI,EAAE;IACpB,IAAIF,KAAK,EAAE;MACT,OAAOE,IAAI,CAACC,QAAQ;IACtB,CAAC,MAAM;MACLD,IAAI,CAACC,QAAQ,GAAGC,SAAS;IAC3B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
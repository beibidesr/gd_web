{"ast":null,"code":"import axios from \"axios\";\nimport { availableAlgorithms } from \"../components/AlgorithmSelection\";\nfunction getAlgoList(algo) {\n  let list = [];\n  for (let i = 0; i < availableAlgorithms.length; i++) {\n    if (algo[availableAlgorithms[i]]) {\n      list.push(availableAlgorithms[i]);\n    }\n  }\n  return list;\n}\nasync function audioQualityRequest(audioURL, algorithms) {\n  let audio = await fetch(audioURL).then(r => r.blob());\n  let type = \"wav\";\n  if (audio.type === \"audio/webm\") {\n    type = \"webm\";\n  }\n  let algoList = getAlgoList(algorithms);\n  let form = new FormData();\n  form.append(\"audioFile\", audio);\n  form.append(\"algorithms\", algoList);\n  form.append(\"type\", type);\n  return axios.post(\"http://192.168.3.133:5000/audioQuality\", form, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n}\nasync function audioQualityTestRequest(audioBlob) {\n  let form = new FormData();\n  form.append(\"audioFile\", audioBlob);\n  form.append(\"algorithms\", ['pesq']);\n  return axios.post(\"http://192.168.3.133:5000/audioQuality\", form, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n}\nexport { audioQualityRequest, audioQualityTestRequest };","map":{"version":3,"names":["axios","availableAlgorithms","getAlgoList","algo","list","i","length","push","audioQualityRequest","audioURL","algorithms","audio","fetch","then","r","blob","type","algoList","form","FormData","append","post","headers","audioQualityTestRequest","audioBlob"],"sources":["E:/CScourse/视听觉/Sound-Quality-HCI/src/requests/soundQuality.js"],"sourcesContent":["import axios from \"axios\";\nimport {availableAlgorithms} from \"../components/AlgorithmSelection\";\n\n\nfunction getAlgoList(algo) {\n  let list = []\n  for (let i = 0; i < availableAlgorithms.length; i++) {\n    if (algo[availableAlgorithms[i]]) {\n      list.push(availableAlgorithms[i])\n    }\n  }\n  return list\n}\n\nasync function audioQualityRequest(audioURL, algorithms) {\n  let audio = await fetch(audioURL).then(r => r.blob())\n  let type = \"wav\"\n  if (audio.type === \"audio/webm\") {\n    type = \"webm\"\n  }\n  let algoList = getAlgoList(algorithms)\n  let form = new FormData()\n  form.append(\"audioFile\", audio)\n  form.append(\"algorithms\", algoList)\n  form.append(\"type\", type)\n  return axios.post(\"http://192.168.3.133:5000/audioQuality\", form, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  })\n}\n\nasync function audioQualityTestRequest(audioBlob) {\n  let form = new FormData()\n  form.append(\"audioFile\", audioBlob)\n  form.append(\"algorithms\", ['pesq'])\n  return axios.post(\"http://192.168.3.133:5000/audioQuality\", form, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  })\n}\n\nexport {audioQualityRequest, audioQualityTestRequest}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,mBAAmB,QAAO,kCAAkC;AAGpE,SAASC,WAAWA,CAACC,IAAI,EAAE;EACzB,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,mBAAmB,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACnD,IAAIF,IAAI,CAACF,mBAAmB,CAACI,CAAC,CAAC,CAAC,EAAE;MAChCD,IAAI,CAACG,IAAI,CAACN,mBAAmB,CAACI,CAAC,CAAC,CAAC;IACnC;EACF;EACA,OAAOD,IAAI;AACb;AAEA,eAAeI,mBAAmBA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EACvD,IAAIC,KAAK,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC;EACrD,IAAIC,IAAI,GAAG,KAAK;EAChB,IAAIL,KAAK,CAACK,IAAI,KAAK,YAAY,EAAE;IAC/BA,IAAI,GAAG,MAAM;EACf;EACA,IAAIC,QAAQ,GAAGf,WAAW,CAACQ,UAAU,CAAC;EACtC,IAAIQ,IAAI,GAAG,IAAIC,QAAQ,EAAE;EACzBD,IAAI,CAACE,MAAM,CAAC,WAAW,EAAET,KAAK,CAAC;EAC/BO,IAAI,CAACE,MAAM,CAAC,YAAY,EAAEH,QAAQ,CAAC;EACnCC,IAAI,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EACzB,OAAOhB,KAAK,CAACqB,IAAI,CAAC,wCAAwC,EAAEH,IAAI,EAAE;IAChEI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ;AAEA,eAAeC,uBAAuBA,CAACC,SAAS,EAAE;EAChD,IAAIN,IAAI,GAAG,IAAIC,QAAQ,EAAE;EACzBD,IAAI,CAACE,MAAM,CAAC,WAAW,EAAEI,SAAS,CAAC;EACnCN,IAAI,CAACE,MAAM,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC;EACnC,OAAOpB,KAAK,CAACqB,IAAI,CAAC,wCAAwC,EAAEH,IAAI,EAAE;IAChEI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ;AAEA,SAAQd,mBAAmB,EAAEe,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}